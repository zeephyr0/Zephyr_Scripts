from telethon import TelegramClient, sync
from telethon import events, utils
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
from telethon.errors import FloodWaitError
from telethon.errors import SessionPasswordNeededError
import datetime
import requests
import time
import random
import tracemalloc
import asyncio
import concurrent.futures

# –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
api_id001 = '4454263'
api_hash001 = '61f812cbe0024e0353f475cb183ca47e'
phone001 = '+998903175516'
cloud_password1 = '2303'

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ 
client001 = TelegramClient('session001', api_id001, api_hash001)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
client001.connect()
if not client001.is_user_authorized():
    client001.send_code_request(phone001)
    try:
        client001.sign_in(phone001, input('Session-001 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client001.sign_in(password=cloud_password1)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
start_time = datetime.datetime.now()

vikings_game = '@vikingi_online_bot'

count = 0
automatic_mode = False

@client001.on(events.NewMessage(pattern='v.off'))
async def stop:
    global automatic_mode
    automatic_mode = False
    await event.message.edit('‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞')

@client001.on(events.NewMessage(pattern='v.on'))
async def start(event):
    global automatic_mode
    automatic_mode = True
    await event.message.edit('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞')

@client.on(events.NewMessage(vikings_game)
async def checker(event):
    global count
    global automatic_mode
    chat_id = vikings 
        if automatic_mode True:
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
            if event.message.text == '–î–æ–∑–æ—Ä –æ–∫–æ–Ω—á–µ–Ω':
                await event.respond('–°—Ç–µ–Ω–∞')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
@client.on(events.MessageEdited(chats=vikings_game))
async def handle_edited_message(event):
    if event.message.text == '–°—Ç–µ–Ω–∞ - –î–æ–∑–æ—Ä':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.click();

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
def get_elapsed_time():
    current_time = datetime.datetime.now()
    elapsed_time = current_time - start_time
    elapsed_time_str = str(elapsed_time).split('.')[0]  # –û—Ç—Å–µ–∫–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    return elapsed_time_str

@client001.on(events.NewMessage(pattern='m.info'))
async def get_info(event):
    global count
    elapsed_time_str = get_elapsed_time()
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = event.chat_id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await send_message(client001, chat_id, f'üßë‚Äçüíª ScriptInfo\n\nüë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚àû\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count1}\nüåÄ –ü—Ä–æ–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycles1}\n‚åõ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞: {elapsed_time_str}')
