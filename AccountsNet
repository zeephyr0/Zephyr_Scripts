# coded by DEM
# good luck =]

from telethon import TelegramClient, sync
from telethon import events
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
import requests
import time
import random
import tracemalloc
import asyncio
import concurrent.futures

# Данные аккаунтов
api_id1 = '12588062'
api_hash1 = 'd0f061c565991d6ed274285c0d032f7a'
phone1 = '+79816661471'

api_id2 = '13123883'
api_hash2 = 'f1fab12098570c2bf8848ad6ea23c62f'
phone2 = '+79676939873'

api_id3 = '19334807'
api_hash3 = '4b4edde7a9d46172399f0ac4cb98ae63'
phone3 = '+79842549006'

api_id4 = '16839412'
api_hash4 = 'aaa86871e0831e2ef1c9df22b921c9d4'
phone4 = '+79386950114'

api_id5 = '19179697'
api_hash5 = 'dd96018b9f53d55342f0c2c754c4fb29'
phone5 = '+79697678142'

api_id6 = '10904880'
api_hash6 = '0bce5ceebd00a5fe38dff632595b0bad'
phone6 = '+79587314180'

api_id7 = '27465489'
api_hash7 = 'e1647013c9838e05ccd9cf1c7e34e8ad'
phone7 = '+923414381467'

api_id8 = '25919669'
api_hash8 = '7b81c08ae57981f7beb4908c79094e44'
phone8 = '+923474233748'

api_id9 = '26917589'
api_hash9 = '202267394797ab983214ddf1c1cfb29c'
phone9 = '+529511991262'

api_id10 = '26056020'
api_hash10 = 'b285005edea91f8c55172d66d0c163a2'
phone10 = '+529381323150'

api_id11 = '27250768'
api_hash11 = '88fa6db6643659749f0e107130dedc70'
phone11 = '+528715749591'

api_id12 = '26637536'
api_hash12 = '95dacc89867e3089d9722be702afd959'
phone12 = '+527225359861'

api_id13 = '20244628'
api_hash13 = '31f1eac97bf8851425d620b69cc87d75'
phone13 = '+529921022973'

api_id14 = '28781052'
api_hash14 = 'da8a73f5fb61c1cf67a871a2a5afef9a'
phone14 = '+525517689385'

api_id15 = '22823126'
api_hash15 = '07b238927248c53498fa9f013cc75809'
phone15 = '+923081667405'

api_id16 = '28506932'
api_hash16 = '0612b354524635bbfbd4e440299b4e65'
phone16 = '+923071908872'

api_id17 = '29202662'
api_hash17 = 'e093efde1201cc926ad478cc129a4ff5'
phone17 = '+213774991926'

api_id18 = '26663385'
api_hash18 = 'edeee3ae160773f177843eeb1ee3413a'
phone18 = '+37368201044'

api_id19 = '26663385'
api_hash19 = '302bd00b3f182259e075008557d06a00'
phone19 = '+37360615885'

api_id20 = '22116060'
api_hash20 = '87aad9e6209606a3862c971c4ac7ade7'
phone20 = '+37060278729'

api_id21 = '23683219'
api_hash21 = '3712b06daec849ace954b67a522acb63'
phone21 = '+37360615885'

# Создание клиентов 
client1 = TelegramClient('session1', api_id1, api_hash1)
client2 = TelegramClient('session2', api_id2, api_hash2)
client3 = TelegramClient('session3', api_id3, api_hash3)
client4 = TelegramClient('session4', api_id4, api_hash4)
client5 = TelegramClient('session5', api_id5, api_hash5)
client6 = TelegramClient('session6', api_id6, api_hash6)
client7 = TelegramClient('session7', api_id7, api_hash7)
client8 = TelegramClient('session8', api_id8, api_hash8)
client9 = TelegramClient('session9', api_id9, api_hash9)
client10 = TelegramClient('session10', api_id10, api_hash10)
client11 = TelegramClient('session11', api_id11, api_hash11)
client12 = TelegramClient('session12', api_id12, api_hash12)
client13 = TelegramClient('session13', api_id13, api_hash13)
client14 = TelegramClient('session14', api_id14, api_hash14)
client15 = TelegramClient('session15', api_id15, api_hash15)
client16 = TelegramClient('session16', api_id16, api_hash16)
client17 = TelegramClient('session17', api_id17, api_hash17)
client18 = TelegramClient('session18', api_id18, api_hash18)
client19 = TelegramClient('session19', api_id19, api_hash19)
client20 = TelegramClient('session20', api_id20, api_hash20)
client21 = TelegramClient('session21', api_id21, api_hash21)


# Авторизация
client1.connect()
if not client1.is_user_authorized():
    client1.send_code_request(phone1)
    client1.sign_in(phone1, input('Session-1 Введите код подтверждения: '))
client2.connect()
if not client2.is_user_authorized():
    client2.send_code_request(phone2)
    client2.sign_in(phone2, input('Session-2 Введите код подтверждения: '))
client3.connect()
if not client3.is_user_authorized():
    client3.send_code_request(phone3)
    client3.sign_in(phone3, input('Session-3 Введите код подтверждения: '))
client4.connect()
if not client4.is_user_authorized():
    client4.send_code_request(phone4)
    client4.sign_in(phone4, input('Session-4 Введите код подтверждения: '))
client5.connect()
if not client5.is_user_authorized():
    client5.send_code_request(phone5)
    client5.sign_in(phone5, input('Session-5 Введите код подтверждения: '))
client6.connect()
if not client6.is_user_authorized():
    client6.send_code_request(phone6)
    client6.sign_in(phone6, input('Session-6 Введите код подтверждения: '))
client7.connect()
if not client7.is_user_authorized():
    client7.send_code_request(phone7)
    client7.sign_in(phone7, input('Session-7 Введите код подтверждения: '))
client8.connect()
if not client8.is_user_authorized():
    client8.send_code_request(phone8)
    client8.sign_in(phone8, input('Session-8 Введите код подтверждения: '))
client9.connect()
if not client9.is_user_authorized():
    client9.send_code_request(phone9)
    client9.sign_in(phone9, input('Session-9 Введите код подтверждения: '))
client10.connect()
if not client10.is_user_authorized():
    client10.send_code_request(phone10)
    client10.sign_in(phone10, input('Session-10 Введите код подтверждения: '))
client11.connect()
if not client11.is_user_authorized():
    client11.send_code_request(phone11)
    client11.sign_in(phone11, input('Session-11 Введите код подтверждения: '))
client12.connect()
if not client12.is_user_authorized():
    client12.send_code_request(phone12)
    client12.sign_in(phone12, input('Session-12 Введите код подтверждения: '))
client13.connect()
if not client13.is_user_authorized():
    client13.send_code_request(phone13)
    client13.sign_in(phone13, input('Session-13 Введите код подтверждения: '))
client14.connect()
if not client14.is_user_authorized():
    client14.send_code_request(phone14)
    client14.sign_in(phone14, input('Session-14 Введите код подтверждения: '))
client15.connect()
if not client15.is_user_authorized():
    client15.send_code_request(phone15)
    client15.sign_in(phone15, input('Session-15 Введите код подтверждения: '))
client16.connect()
if not client16.is_user_authorized():
    client16.send_code_request(phone16)
    client16.sign_in(phone16, input('Session-16 Введите код подтверждения: '))
client17.connect()
if not client17.is_user_authorized():
    client17.send_code_request(phone17)
    client17.sign_in(phone17, input('Session-17 Введите код подтверждения: '))
client18.connect()
if not client18.is_user_authorized():
    client18.send_code_request(phone18)
    client18.sign_in(phone18, input('Session-18 Введите код подтверждения: '))
client19.connect()
if not client19.is_user_authorized():
    client19.send_code_request(phone19)
    client19.sign_in(phone19, input('Session-19 Введите код подтверждения: '))
client20.connect()
if not client20.is_user_authorized():
    client20.send_code_request(phone20)
    client20.sign_in(phone20, input('Session-20 Введите код подтверждения: '))
client21.connect()
if not client21.is_user_authorized():
    client21.send_code_request(phone21)
    client21.sign_in(phone21, input('Session-21 Введите код подтверждения: '))


# Адресы
mineEvo_channel = '@mine_evo_news'
my_channel = '@Demo_minePromo'
mine_evo = '@mine_evo_bot'
twins_group = '@twinsFarm_byDem'

count = 0

# Асинхронная функция для отправки сообщений одновременно
async def send_message(client, chat_id, message):
    global count
    await client(SendMessageRequest(chat_id, message))
    count += 1

# Команда для отправки нескольких сообщений с задержкой(1-9)
@client1.on(events.NewMessage(pattern='/send_multiple'))
async def send_multiple_messages(event):
    global count
    # Определение id чата
    chat_id = event.chat_id
    # Определение текста для отправки сообщения 
    message_text = event.raw_text.encode('utf-8').decode('utf-8')
    # Извлечение сообщений после команды
    messages = event.raw_text.split(' ')[1:]
    # Создание списка корутин для каждого клиента
    while True:
        # Создание списка корутин для каждого клиента
        coroutines = []
        for message in messages:
            coroutines.append(send_message(client1, chat_id, message))
            coroutines.append(send_message(client2, chat_id, message))
            coroutines.append(send_message(client3, chat_id, message))
            coroutines.append(send_message(client4, chat_id, message))
            coroutines.append(send_message(client5, chat_id, message))
            coroutines.append(send_message(client6, chat_id, message))
            coroutines.append(send_message(client7, chat_id, message))
            coroutines.append(send_message(client8, chat_id, message))
            coroutines.append(send_message(client9, chat_id, message))
            coroutines.append(send_message(client10, chat_id, message))
            coroutines.append(send_message(client11, chat_id, message))
            coroutines.append(send_message(client12, chat_id, message))
            coroutines.append(send_message(client13, chat_id, message))
            coroutines.append(send_message(client14, chat_id, message))
            coroutines.append(send_message(client15, chat_id, message))
            coroutines.append(send_message(client16, chat_id, message))
            coroutines.append(send_message(client17, chat_id, message))
            coroutines.append(send_message(client18, chat_id, message))
            coroutines.append(send_message(client19, chat_id, message))
            coroutines.append(send_message(client20, chat_id, message))
            coroutines.append(send_message(client21, chat_id, message))
        # Одновременное выполнение всех корутин
        await asyncio.gather(*coroutines)
        # Задержка
        await asyncio.sleep(2);
        count += len(messages) * 21
@client1.on(events.NewMessage(pattern='/info'))
async def get_info(event):
    global count
    # Определение id чата
    chat_id = event.chat_id
    # Отправка сообщения с информацией о количестве отправленных сообщений
    await send_message(client1, chat_id, f'Отправлено сообщений: {count}')


# Модуль для проверки кейсов
@client1.on(events.NewMessage(pattern='/cases'))
async def cases_info(event):
    # Текст для отправки сообщения 
    message = 'кейсы'
    clients = [client1, client2, client3, client4, client5, client6, client7, client8, client9, client10, client11, client12, client13, client14, client15, client16, client17, client18, client19, client20, client21]
    for client in clients:
        await client(SendMessageRequest(mine_evo, message))

# Отправка кейсов

# Список кейсов
cases_list = {
    "✉": "кт",
    "🧧": "ркт",
    "📦": "к",
    "🗳": "рк",
    "🕋": "миф",
    "💎": "кр",
    "🌌": "зв"
}
async def send_transfer_message(client, chat_id, case_name, quantity):
    # Определение названия кейса для передачи
    case_alias = cases_list.get(case_name, "")
    # Сообщение о передаче
    transfer_message = f"Передать ZEPHYR_god {case_alias} {quantity}"
    await client.send_message(chat_id, transfer_message)
    # Задержка 
    await asyncio.sleep(3)
async def send_transfer_messages(client, event):
    # Определение id чата
    chat_id = '@mine_evo_bot'
    # Сообщение которое будет проверяться 
    message = event.raw_text
    lines = message.split("\n")
    # Обработка сообщения и отправка
    for line in lines:
        for case in cases_list:
            if case in line:
                item = line.split("шт.")
                if len(item) >= 2:
                    item = item[0].split(":")
                    if len(item) >= 2:
                        item = item[1].strip()
                        await send_transfer_message(client, chat_id, case, item)

# Определение функции обработчика входящих сообщений
client_list = [client1, client2, client3, client4, client5, client6, client7, client8, client9, client10, client11, client12, client13, client14, client15, client16, client17, client18, client19, client20, client21]
player_names = ['aboba1', 'aboba2', 'aboba3', 'aboba4', 'aboba5', 'aboba6', 'aboba7', 'aboba8', 'aboba9', 'aboba10', 'aboba11', 'aboba12', 'aboba13', 'aboba14', 'aboba15', 'aboba16', 'aboba17', 'aboba18', 'aboba19', 'aboba20', 'aboba21']

for i, client in enumerate(client_list):
    @client.on(events.NewMessage)
    async def handle_incoming_message(event, client=client):
        for player_name in player_names:
            if f"📦 Кейсы игрока\n{player_name}" in event.raw_text:
                await send_transfer_messages(client, event)

# Промо-Коды
@client1.on(events.NewMessage(chats=[mineEvo_channel, my_channel]))  
async def process_new_message(event):
    # Сообщение которое будет проверяться 
    message = event.message
    clients = [client1, client2, client3, client4, client5, client6, client7, client8, client9, client10, client11, client12, client13, client14, client15, client16, client17, client18, client19, client20, client21]
    if 'Промо' in message.message:
        promo_code = message.message.split('Промо ')[1].split()[0]
        for client in clients:
            await client(SendMessageRequest(mine_evo, f'промо {promo_code}'))

# Запуск клиентов
tracemalloc.start()
client1.start()
client2.start()
client3.start()
client4.start()
client5.start()
client6.start()
client7.start()
client8.start()
client9.start()
client10.start()
client11.start()
client12.start()
client13.start()
client14.start()
client15.start()
client16.start()
client17.start()
client18.start()
client19.start()
client20.start()
client21.start()
try:
    client1.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client1.disconnect()
try:
    client2.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client2.disconnect()
try:
    client3.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client3.disconnect()
try:
    client4.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client4.disconnect()
try:
    client5.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client5.disconnect()
try:
    client6.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client6.disconnect()
try:
    client7.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client7.disconnect()
try:
    client8.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client8.disconnect()
try:
    client9.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client9.disconnect()
try:
    client10.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client10.disconnect()
try:
    client11.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client11.disconnect()
try:
    client12.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client12.disconnect()
try:
    client13.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client13.disconnect()
try:
    client14.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client14.disconnect()
try:
    client15.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client15.disconnect()
try:
    client16.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client16.disconnect()
try:
    client17.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client17.disconnect()
try:
    client18.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client18.disconnect()
try:
    client19.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client19.disconnect()
try:
    client20.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client20.disconnect()
try:
    client21.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client21.disconnect()
