# coded by DEM
# good luck =]

from telethon import TelegramClient, sync
from telethon import events
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
import requests
import time
import random
import asyncio
import tracemalloc

# Данные аккаунтов
api_id1 = '12588062'
api_hash1 = 'd0f061c565991d6ed274285c0d032f7a'
phone1 = '+79816661471'

api_id2 = '13123883'
api_hash2 = 'f1fab12098570c2bf8848ad6ea23c62f'
phone2 = '+79676939873'

api_id3 = '19334807'
api_hash3 = '4b4edde7a9d46172399f0ac4cb98ae63'
phone3 = '+79842549006'

api_id4 = '16839412'
api_hash4 = 'aaa86871e0831e2ef1c9df22b921c9d4'
phone4 = '+79386950114'

api_id5 = '19179697'
api_hash5 = 'dd96018b9f53d55342f0c2c754c4fb29'
phone5 = '+79697678142'

api_id6 = '10904880'
api_hash6 = '0bce5ceebd00a5fe38dff632595b0bad'
phone6 = '+79587314180'

api_id7 = '27465489'
api_hash7 = 'e1647013c9838e05ccd9cf1c7e34e8ad'
phone7 = '+923414381467'

api_id8 = '25919669'
api_hash8 = '7b81c08ae57981f7beb4908c79094e44'
phone8 = '+923474233748'

api_id9 = '26917589'
api_hash9 = '202267394797ab983214ddf1c1cfb29c'
phone9 = '+529511991262'

api_id10 = '26056020'
api_hash10 = 'b285005edea91f8c55172d66d0c163a2'
phone10 = '+529381323150'

api_id11 = '27250768'
api_hash11 = '88fa6db6643659749f0e107130dedc70'
phone11 = '+528715749591'

api_id12 = '26637536'
api_hash12 = '95dacc89867e3089d9722be702afd959'
phone12 = '+527225359861'

api_id13 = '20244628'
api_hash13 = '31f1eac97bf8851425d620b69cc87d75'
phone13 = '+529921022973'

api_id14 = '28781052'
api_hash14 = 'da8a73f5fb61c1cf67a871a2a5afef9a'
phone14 = '+525517689385'

api_id15 = '22823126'
api_hash15 = '07b238927248c53498fa9f013cc75809'
phone15 = '+923081667405'

api_id16 = '28506932'
api_hash16 = '0612b354524635bbfbd4e440299b4e65'
phone16 = '+923071908872'

api_id17 = '29202662'
api_hash17 = 'e093efde1201cc926ad478cc129a4ff5'
phone17 = '+213774991926'

api_id19 = '23432483'
api_hash19 = '68d100c6a514e67bf60ff86745bca406'
phone19 = '+79857390622'

# Создание клиентов 
client1 = TelegramClient('session1', api_id1, api_hash1)
client2 = TelegramClient('session2', api_id2, api_hash2)
client3 = TelegramClient('session3', api_id3, api_hash3)
client4 = TelegramClient('session4', api_id4, api_hash4)
client5 = TelegramClient('session5', api_id5, api_hash5)
client6 = TelegramClient('session6', api_id6, api_hash6)
client7 = TelegramClient('session7', api_id7, api_hash7)
client8 = TelegramClient('session8', api_id8, api_hash8)
client9 = TelegramClient('session9', api_id9, api_hash9)
client10 = TelegramClient('session10', api_id10, api_hash10)
client11 = TelegramClient('session11', api_id11, api_hash11)
client12 = TelegramClient('session12', api_id12, api_hash12)
client13 = TelegramClient('session13', api_id13, api_hash13)
client14 = TelegramClient('session14', api_id14, api_hash14)
client15 = TelegramClient('session15', api_id15, api_hash15)
client16 = TelegramClient('session16', api_id16, api_hash16)
client17 = TelegramClient('session17', api_id17, api_hash17)
client19 = TelegramClient('session19', api_id19, api_hash19)


# Авторизация
client1.connect()
if not client1.is_user_authorized():
    client1.send_code_request(phone1)
    client1.sign_in(phone1, input('Session-1 Введите код подтверждения: '))
client2.connect()
if not client2.is_user_authorized():
    client2.send_code_request(phone2)
    client2.sign_in(phone2, input('Session-2 Введите код подтверждения: '))
client3.connect()
if not client3.is_user_authorized():
    client3.send_code_request(phone3)
    client3.sign_in(phone3, input('Session-3 Введите код подтверждения: '))
client4.connect()
if not client4.is_user_authorized():
    client4.send_code_request(phone4)
    client4.sign_in(phone4, input('Session-4 Введите код подтверждения: '))
client5.connect()
if not client5.is_user_authorized():
    client5.send_code_request(phone5)
    client5.sign_in(phone5, input('Session-5 Введите код подтверждения: '))
client6.connect()
if not client6.is_user_authorized():
    client6.send_code_request(phone6)
    client6.sign_in(phone6, input('Session-6 Введите код подтверждения: '))
client7.connect()
if not client7.is_user_authorized():
    client7.send_code_request(phone7)
    client7.sign_in(phone7, input('Session-7 Введите код подтверждения: '))
client8.connect()
if not client8.is_user_authorized():
    client8.send_code_request(phone8)
    client8.sign_in(phone8, input('Session-8 Введите код подтверждения: '))
client9.connect()
if not client9.is_user_authorized():
    client9.send_code_request(phone9)
    client9.sign_in(phone9, input('Session-9 Введите код подтверждения: '))
client10.connect()
if not client10.is_user_authorized():
    client10.send_code_request(phone10)
    client10.sign_in(phone10, input('Session-10 Введите код подтверждения: '))
client11.connect()
if not client11.is_user_authorized():
    client11.send_code_request(phone11)
    client11.sign_in(phone11, input('Session-11 Введите код подтверждения: '))
client12.connect()
if not client12.is_user_authorized():
    client12.send_code_request(phone12)
    client12.sign_in(phone12, input('Session-12 Введите код подтверждения: '))
client13.connect()
if not client13.is_user_authorized():
    client13.send_code_request(phone13)
    client13.sign_in(phone13, input('Session-13 Введите код подтверждения: '))
client14.connect()
if not client14.is_user_authorized():
    client14.send_code_request(phone14)
    client14.sign_in(phone14, input('Session-14 Введите код подтверждения: '))
client15.connect()
if not client15.is_user_authorized():
    client15.send_code_request(phone15)
    client15.sign_in(phone15, input('Session-15 Введите код подтверждения: '))
client16.connect()
if not client16.is_user_authorized():
    client16.send_code_request(phone16)
    client16.sign_in(phone16, input('Session-16 Введите код подтверждения: '))
client17.connect()
if not client17.is_user_authorized():
    client17.send_code_request(phone17)
    client17.sign_in(phone17, input('Session-17 Введите код подтверждения: '))
client19.connect()
if not client17.is_user_authorized():
    client19.send_code_request(phone17)
    client19.sign_in(phone19, input('Session-19 Введите код подтверждения: '))

# Адресы
mineEvo_channel = '@mine_evo_news'
my_channel = '@Demo_minePromo'
mine_evo = '@mine_evo_bot'
twins_group = '@twinsFarm_byDem'

count = 0
# Команда для отправки нескольких сообщений с задержкой(1-6)
@client1.on(events.NewMessage(pattern='/send_multiple'))
async def send_multiple_messages(event):
    global count
    # Определение id чата
    chat_id = event.chat_id
    # Определение текста для отправки сообщения 
    message_text = event.raw_text.encode('utf-8').decode('utf-8')
    # Цикл повторений
    for i in range(1000000):
        for message in message_text:
            # Отправка сообщений
            await client1(SendMessageRequest(chat_id, message))
            count += 1
            await client2(SendMessageRequest(chat_id, message))
            count += 1
            await client3(SendMessageRequest(chat_id, message))
            count += 1
            await client4(SendMessageRequest(chat_id, message))
            count += 1
            await client5(SendMessageRequest(chat_id, message))
            count += 1
            await client6(SendMessageRequest(chat_id, message))
            count += 1
            time.sleep(1);

# Команда для отправки нескольких сообщений с задержкой(7-12)
@client7.on(events.NewMessage(pattern='/send_multiple'))
async def send_multiple_messages(event):
    global count
    # Определение id чата
    chat_id = event.chat_id
    # Определение текста для отправки сообщения 
    message_text = event.raw_text.encode('utf-8').decode('utf-8')
    # Цикл повторений
    for i in range(1000000):
        for message in message_text:
            # Отправка сообщений
            await client7(SendMessageRequest(chat_id, message))
            count += 1
            await client8(SendMessageRequest(chat_id, message))
            count += 1
            await client9(SendMessageRequest(chat_id, message))
            count += 1
            await client10(SendMessageRequest(chat_id, message))
            count += 1
            await client11(SendMessageRequest(chat_id, message))
            count += 1
            await client12(SendMessageRequest(chat_id, message))
            count += 1
            time.sleep(1);

# Команда для отправки нескольких сообщений с задержкой(13-18)
@client13.on(events.NewMessage(pattern='/send_multiple'))
async def send_multiple_messages(event):
    global count
    # Определение id чата
    chat_id = event.chat_id
    # Определение текста для отправки сообщения 
    message_text = event.raw_text.encode('utf-8').decode('utf-8')
    # Цикл повторений
    for i in range(1000000):
        for message in message_text:
            # Отправка сообщений
            await client13(SendMessageRequest(chat_id, message))
            count += 1
            await client14(SendMessageRequest(chat_id, message))
            count += 1
            await client15(SendMessageRequest(chat_id, message))
            count += 1
            await client16(SendMessageRequest(chat_id, message))
            await client17(SendMessageRequest(chat_id, message))
            count += 1
            await client19(SendMessageRequest(chat_id, message))
            count += 1
            time.sleep(1);


@client1.on(events.NewMessage(pattern='/message_count'))
async def display_message_count(event):
    global count 
    # Определение id чата
    chat_id = event.chat_id
    # Отправка сообщения с количеством отправленных сообщений
    await client1.send_message(chat_id, f'Total messages sent: {count}')

# Модуль для проверки кейсов
@client1.on(events.NewMessage(pattern='/cases'))
async def cases_info(event):
    # Текст для отправки сообщения 
    message = 'кейсы'
    # Отправка сообщений 
    await client1(SendMessageRequest(mine_evo, message))
    await client2(SendMessageRequest(mine_evo, message))
    await client3(SendMessageRequest(mine_evo, message))
    await client4(SendMessageRequest(mine_evo, message))
    await client5(SendMessageRequest(mine_evo, message))
    await client6(SendMessageRequest(mine_evo, message))
    await client7(SendMessageRequest(mine_evo, message))
    await client8(SendMessageRequest(mine_evo, message))
    await client9(SendMessageRequest(mine_evo, message))
    await client10(SendMessageRequest(mine_evo, message))
    await client11(SendMessageRequest(mine_evo, message))
    await client12(SendMessageRequest(mine_evo, message))
    await client13(SendMessageRequest(mine_evo, message))
    await client14(SendMessageRequest(mine_evo, message))
    await client15(SendMessageRequest(mine_evo, message))
    await client16(SendMessageRequest(mine_evo, message))
    await client17(SendMessageRequest(mine_evo, message))
    await client19(SendMessageRequest(mine_evo, message))

# Отправка кейсов

# Список кейсов
cases_list = {
    "✉": "кт",
    "🧧": "ркт",
    "📦": "к",
    "🗳": "рк",
    "🕋": "миф",
    "💎": "кр",
    "🌌": "зв"
}
async def send_transfer_message(client, chat_id, case_name, quantity):
    # Определение названия кейса для передачи
    case_alias = cases_list.get(case_name, "")
    # Сообщение о передаче
    transfer_message = f"Передать ZEPHYR_god {case_alias} {quantity}"
    await client.send_message(chat_id, transfer_message)
    # Задержка 
    await asyncio.sleep(3)
async def send_transfer_messages(client, event):
    # Определение id чата
    chat_id = '@mine_evo_bot'
    # Сообщение которое будет проверяться 
    message = event.raw_text
    lines = message.split("\n")
    # Обработка сообщения и отправка
    for line in lines:
        for case in cases_list:
            if case in line:
                item = line.split("шт.")
                if len(item) >= 2:
                    item = item[0].split(":")
                    if len(item) >= 2:
                        item = item[1].strip()
                        await send_transfer_message(client, chat_id, case, item)

# Определение функции обработчика входящих сообщений
@client1.on(events.NewMessage)
async def handle_incoming_message_client1(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client1, event)
@client2.on(events.NewMessage)
async def handle_incoming_message_client2(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client2, event)
@client3.on(events.NewMessage)
async def handle_incoming_message_client3(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client3, event)
@client4.on(events.NewMessage)
async def handle_incoming_message_client4(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client4, event)
@client5.on(events.NewMessage)
async def handle_incoming_message_client5(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client5, event)
@client6.on(events.NewMessage)
async def handle_incoming_message_client6(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client6, event)
@client7.on(events.NewMessage)
async def handle_incoming_message_client7(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client7, event)
@client8.on(events.NewMessage)
async def handle_incoming_message_client8(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client8, event)
@client9.on(events.NewMessage)
async def handle_incoming_message_client9(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client9, event)
@client10.on(events.NewMessage)
async def handle_incoming_message_client10(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client10, event)
@client11.on(events.NewMessage)
async def handle_incoming_message_client11(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client11, event)
@client12.on(events.NewMessage)
async def handle_incoming_message_client12(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client12, event)
@client13.on(events.NewMessage)
async def handle_incoming_message_client13(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client13, event)
@client14.on(events.NewMessage)
async def handle_incoming_message_client14(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client14, event)
@client15.on(events.NewMessage)
async def handle_incoming_message_client15(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client15, event)
@client16.on(events.NewMessage)
async def handle_incoming_message_client16(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client16, event)
@client17.on(events.NewMessage)
async def handle_incoming_message_client17(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client17, event)
@client19.on(events.NewMessage)
async def handle_incoming_message_client19(event):
    if "Кейсы игрока" in event.raw_text:
        await send_transfer_messages(client19, event)

# Промо-Коды
@client1.on(events.NewMessage(chats=[mineEvo_channel, my_channel]))  
async def process_new_message(event):
    # Сообщение которое будет проверяться 
    message = event.message
    if 'Промо' in message.message:
        # Определение вывод и отправка промокода
        promo_code = message.message.split('Промо ')[1].split()[0]
        await client1.send_message(mine_evo, f'промо {promo_code}')
        await client2.send_message(mine_evo, f'промо {promo_code}')
        await client3.send_message(mine_evo, f'промо {promo_code}')
        await client4.send_message(mine_evo, f'промо {promo_code}')
        await client5.send_message(mine_evo, f'промо {promo_code}')
        await client6.send_message(mine_evo, f'промо {promo_code}')
        await client7.send_message(mine_evo, f'промо {promo_code}')
        await client8.send_message(mine_evo, f'промо {promo_code}')
        await client9.send_message(mine_evo, f'промо {promo_code}')
        await client10.send_message(mine_evo, f'промо {promo_code}')
        await client11.send_message(mine_evo, f'промо {promo_code}')
        await client12.send_message(mine_evo, f'промо {promo_code}')
        await client13.send_message(mine_evo, f'промо {promo_code}')
        await client14.send_message(mine_evo, f'промо {promo_code}')
        await client15.send_message(mine_evo, f'промо {promo_code}')
        await client16.send_message(mine_evo, f'промо {promo_code}')
        await client17.send_message(mine_evo, f'промо {promo_code}')
        await client19.send_message(mine_evo, f'промо {promo_code}')
        
# Запуск клиентов
client1.start()
client2.start()
client3.start()
client4.start()
client5.start()
client6.start()
client7.start()
client8.start()
client9.start()
client10.start()
client11.start()
client12.start()
client13.start()
client14.start()
client15.start()
client16.start()
client17.start()
client19.start()
try:
    client1.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client1.disconnect()
try:
    client2.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client2.disconnect()
try:
    client3.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client3.disconnect()
try:
    client4.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client4.disconnect()
try:
    client5.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client5.disconnect()
try:
    client6.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client6.disconnect()
try:
    client7.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client7.disconnect()
try:
    client8.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client8.disconnect()
try:
    client9.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client9.disconnect()
try:
    client10.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client10.disconnect()
try:
    client11.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client11.disconnect()
try:
    client12.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client12.disconnect()
try:
    client13.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client13.disconnect()
try:
    client14.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client14.disconnect()
try:
    client15.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client15.disconnect()
try:
    client16.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client16.disconnect()
try:
    client17.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client17.disconnect()
try:
    client19.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client19.disconnect()
 
