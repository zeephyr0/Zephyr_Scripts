# coded by DEM))
# good luck =]

from telethon import TelegramClient, sync
from telethon import events, utils
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
from telethon.errors import FloodWaitError
from telethon.errors import SessionPasswordNeededError
import datetime
import requests
import time
import random
import tracemalloc
import asyncio
import concurrent.futures
import json

# –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

api_id0 = '4454263'
api_hash0 = '61f812cbe0024e0353f475cb183ca47e'
phone0 = '+998903175516'

api_id001 = '12588062'
api_hash001 = 'd0f061c565991d6ed274285c0d032f7a'
phone001 = '+79816661471'

api_id002 = '13123883'
api_hash002 = 'f1fab12098570c2bf8848ad6ea23c62f'
phone002 = '+79676939873'

api_id003 = '19334807'
api_hash003 = '4b4edde7a9d46172399f0ac4cb98ae63'
phone003 = '+79842549006'

api_id004 = '16839412'
api_hash004 = 'aaa86871e0831e2ef1c9df22b921c9d4'
phone004 = '+79386950114'

api_id005 = '19179697'
api_hash005 = 'dd96018b9f53d55342f0c2c754c4fb29'
phone005 = '+79697678142'

api_id006 = '20242585'
api_hash006 = '77312de9aab579af857c5d2fdb4e1d64'
phone006 = '+447424459503'

api_id007 = '20410656'
api_hash007 = '7f48793a7737fe3a910874c38a5f6e21'
phone007 = '+60149256978'

api_id008 = '24106632'
api_hash008 = '65093abacde2ca064ce8802c84863fec'
phone008 = '+447771411600'

cloud_password1 = '2303'


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ 
client0 = TelegramClient('session0', api_id0, api_hash0)
client001 = TelegramClient('session001', api_id001, api_hash001)
client002 = TelegramClient('session002', api_id002, api_hash002)
client003 = TelegramClient('session003', api_id003, api_hash003)
client004 = TelegramClient('session004', api_id004, api_hash004)
client005 = TelegramClient('session005', api_id005, api_hash005)
client006 = TelegramClient('session006', api_id006, api_hash006)
client007 = TelegramClient('session007', api_id007, api_hash007)
client008 = TelegramClient('session008', api_id008, api_hash008)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
start_time = datetime.datetime.now()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
clients1 = [client001, client002, client003, client004, client005, client006, client007, client008]
clients2 = [client0, client001, client002, client003, client004, client005, client006, client007, client008]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
client0.connect()
if not client0.is_user_authorized():
    client0.send_code_request(phone0)
    try:
        client0.sign_in(phone0, input('Session-0 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client0.sign_in(password=cloud_password1)

client001.connect()
if not client001.is_user_authorized():
    client001.send_code_request(phone001)
    try:
        client001.sign_in(phone001, input('Session-001 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client001.sign_in(password=cloud_password1)

client002.connect()
if not client002.is_user_authorized():
    client002.send_code_request(phone002)
    try:
        client002.sign_in(phone002, input('Session-002 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client002.sign_in(password=cloud_password1)

client003.connect()
if not client003.is_user_authorized():
    client003.send_code_request(phone003)
    try:
        client003.sign_in(phone003, input('Session-003 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client003.sign_in(password=cloud_password1)

client004.connect()
if not client004.is_user_authorized():
    client004.send_code_request(phone004)
    try:
        client004.sign_in(phone004, input('Session-004 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client004.sign_in(password=cloud_password1)

client005.connect()
if not client005.is_user_authorized():
    client005.send_code_request(phone005)
    try:
        client005.sign_in(phone005, input('Session-005 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client005.sign_in(password=cloud_password1)

client006.connect()
if not client006.is_user_authorized():
    client006.send_code_request(phone006)
    try:
        client006.sign_in(phone006, input('Session-006 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client006.sign_in(password=cloud_password1)

client007.connect()
if not client007.is_user_authorized():
    client007.send_code_request(phone007)
    try:
        client007.sign_in(phone007, input('Session-007 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client007.sign_in(password=cloud_password1)

client008.connect()
if not client008.is_user_authorized():
    client008.send_code_request(phone008)
    try:
        client008.sign_in(phone008, input('Session-008 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client008.sign_in(password=cloud_password1)

for client in clients2:
    client.start()

print('–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!')

# –ê–¥—Ä–µ—Å—ã
mine_evo = "@PrankAirdropBot"

count1 = 0
cycles1 = 0
stop_sending1 = True
stop_sending2 = True
stop_sending3 = False
stop_sending4 = False
async def send_message(client, mine_evo, message):
    try:
        await client.send_message(mine_evo, message)
    except FloodWaitError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ FloodWaitError
        print(f"–û—à–∏–±–∫–∞ FloodWaitError –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client}: {e}")
        clients1.disconnect(client)
    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        print(f"–û—à–∏–±–∫–∞: {e} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client}")
        clients1.disconnect(client)
    except ConnectionError:
        print('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
        await asyncio.sleep(15)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    except KeyboardInterrupt:
        pass
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client}: {e}")

@client0.on(events.NewMessage(pattern='m.off'))
async def stop_sending_messages(event):
    global stop_sending1
    stop_sending1 = True
    await event.message.edit('‚ùå–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')
    await asyncio.sleep(5);
    await event.message.delete();

@client0.on(events.NewMessage(pattern='m.on'))
async def start_sending_messages(event):
    global stop_sending1
    stop_sending1 = False
    await event.message.edit('‚úÖ–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞')
    await asyncio.sleep(5);
    await event.message.delete();

@client0.on(events.NewMessage(pattern='m.send'))
async def send_multiple_messages1(event):
    global count1
    global cycles1
    global clients2  # Declare clients1 as a global variable
    await event.message.edit('–ü—Ä–æ–±—É–µ–º –∫–æ–ø–∞—Ç—å...')
    chat_id = mine_evo
    if stop_sending1:
        await asyncio.sleep(2) 
        await event.message.edit('‚ò†Ô∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')
        await asyncio.sleep(3);
        await event.message.delete();
    else:
        await asyncio.sleep(2)
        await event.message.edit('üí¢–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∞—Ç—å')
        await asyncio.sleep(3);
        await event.message.delete();
    while not stop_sending1:
        coroutines = []
        for client in clients2:
            coroutines.append(send_message(client, chat_id, 'üë®‚Äçüíª –ú–∞–π–Ω–∏–Ω–≥'))
        await asyncio.gather(*coroutines)
        await asyncio.sleep(5);
        clients1 = [client for client in clients1 if client.is_connected()]

        if not clients1:
            print("–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            break

for client in clients2:
    try:
        client.run_until_disconnected()
    except KeyboardInterrupt:
        client.disconnect()
    finally:
        client.disconnect()
