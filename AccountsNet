# coded by DEM))
# good luck =]

from telethon import TelegramClient, sync
from telethon import events, utils
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
from telethon.errors import FloodWaitError
from telethon.errors import SessionPasswordNeededError
import datetime
import requests
import time
import random
import tracemalloc
import asyncio
import concurrent.futures
import json

# Данные аккаунтов

api_id0 = '4454263'

api_id0 = '4454263'
api_hash0 = '61f812cbe0024e0353f475cb183ca47e'
phone0 = '+998903175516'

api_id001 = '12588062'
api_hash001 = 'd0f061c565991d6ed274285c0d032f7a'
phone001 = '+79816661471'

api_id002 = '13123883'
api_hash002 = 'f1fab12098570c2bf8848ad6ea23c62f'
phone002 = '+79676939873'

api_id004 = '16839412'
api_hash004 = 'aaa86871e0831e2ef1c9df22b921c9d4'
phone004 = '+79386950114'

api_id005 = '19179697'
api_hash005 = 'dd96018b9f53d55342f0c2c754c4fb29'
phone005 = '+79697678142'

api_id006 = '20242585'
api_hash006 = '77312de9aab579af857c5d2fdb4e1d64'
phone006 = '+447424459503'

api_id007 = '20410656'
api_hash007 = '7f48793a7737fe3a910874c38a5f6e21'
phone007 = '+60149256978'

api_id008 = '24106632'
api_hash008 = '65093abacde2ca064ce8802c84863fec'
phone008 = '+447771411600'

api_id009 = '22785810'
api_hash009 = 'b5bcdb5405df299e4c30bd25fdefa62b'
phone009 = '+380633622230'

api_id010 = '23724146'
api_hash010 = '4802afa460cfdda6b9a3a4515feb943e'
phone010 = '+380682543489'

api_id011 = '24475762'
api_hash011 = 'af27d31ef4362391d63d5c034a5e9688'
phone011 = '+380639505680'

api_id014 = '20322427'
api_hash014 = '99c53a881e351f493633e52440dbc9a4'
phone014 = '+19145683120'

api_id015 = '27690812'
api_hash015 = '1936c6a72ff8f002b3f456fb2a3e18bc'
phone015 = '+18459935555'

cloud_password1 = '2303'


# Создание клиентов 
client0 = TelegramClient('session0', api_id0, api_hash0)
client001 = TelegramClient('session001', api_id001, api_hash001)
client002 = TelegramClient('session002', api_id002, api_hash002)
client004 = TelegramClient('session004', api_id004, api_hash004)
client005 = TelegramClient('session005', api_id005, api_hash005)
client006 = TelegramClient('session006', api_id006, api_hash006)
client007 = TelegramClient('session007', api_id007, api_hash007)
client008 = TelegramClient('session008', api_id008, api_hash008)
client009 = TelegramClient('session009', api_id009, api_hash009)
client010 = TelegramClient('session010', api_id010, api_hash010)
client011 = TelegramClient('session011', api_id011, api_hash011)
client014 = TelegramClient('session014', api_id014, api_hash014)
client015 = TelegramClient('session015', api_id015, api_hash015)

# Время запуска скрипта
start_time = datetime.datetime.now()

# Авторизация
clients1 = [client001, client002, client004, client005, client006, client007, client008, client009, client010, client011, client014, client015]
clients2 = [client0, client001, client002, client004, client005, client006, client007, client008, client009, client010, client011, client014, client015]

# Авторизация
client0.connect()
if not client0.is_user_authorized():
    client0.send_code_request(phone0)
    try:
        client0.sign_in(phone0, input('Session-0 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client0.sign_in(password=cloud_password1)

client001.connect()
if not client001.is_user_authorized():
    client001.send_code_request(phone001)
    try:
        client001.sign_in(phone001, input('Session-001 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client001.sign_in(password=cloud_password1)

client002.connect()
if not client002.is_user_authorized():
    client002.send_code_request(phone002)
    try:
        client002.sign_in(phone002, input('Session-002 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client002.sign_in(password=cloud_password1)

client004.connect()
if not client004.is_user_authorized():
    client004.send_code_request(phone004)
    try:
        client004.sign_in(phone004, input('Session-004 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client004.sign_in(password=cloud_password1)

client005.connect()
if not client005.is_user_authorized():
    client005.send_code_request(phone005)
    try:
        client005.sign_in(phone005, input('Session-005 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client005.sign_in(password=cloud_password1)

client006.connect()
if not client006.is_user_authorized():
    client006.send_code_request(phone006)
    try:
        client006.sign_in(phone006, input('Session-006 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client006.sign_in(password=cloud_password1)

client007.connect()
if not client007.is_user_authorized():
    client007.send_code_request(phone007)
    try:
        client007.sign_in(phone007, input('Session-007 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client007.sign_in(password=cloud_password1)

client008.connect()
if not client008.is_user_authorized():
    client008.send_code_request(phone008)
    try:
        client008.sign_in(phone008, input('Session-008 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client008.sign_in(password=cloud_password1)

client009.connect()
if not client009.is_user_authorized():
    client009.send_code_request(phone009)
    try:
        client009.sign_in(phone009, input('Session-009 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client009.sign_in(password=cloud_password1)

client010.connect()
if not client010.is_user_authorized():
    client010.send_code_request(phone010)
    try:
        client010.sign_in(phone010, input('Session-010 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client010.sign_in(password=cloud_password1)

client011.connect()
if not client011.is_user_authorized():
    client011.send_code_request(phone011)
    try:
        client011.sign_in(phone011, input('Session-011 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client011.sign_in(password=cloud_password1)

client014.connect()
if not client014.is_user_authorized():
    client014.send_code_request(phone014)
    try:
        client014.sign_in(phone014, input('Session-014 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client014.sign_in(password=cloud_password1)

client015.connect()
if not client015.is_user_authorized():
    client015.send_code_request(phone015)
    try:
        client015.sign_in(phone015, input('Session-015 Введите код подтверждения: '), password=cloud_password1)
    except SessionPasswordNeededError:
        client015.sign_in(password=cloud_password1)

for client in clients2:
    client.start()

print('Клиенты успешно запущены!')

# Адресы
mine_evo = "@PrankAirdropBot"

count1 = 0
cycles1 = 0
stop_sending1 = True
stop_sending2 = True
stop_sending3 = False
stop_sending4 = False
async def send_message(client, mine_evo, message):
    try:
        await client.send_message(mine_evo, message)
    except FloodWaitError as e:
        # Обработка ошибки FloodWaitError
        print(f"Ошибка FloodWaitError для клиента {client}: {e}")
        clients1.disconnect(client)
    except ValueError as e:
        # Обработка ошибки, если клиент не найден или нет доступа к аккаунту
        print(f"Ошибка: {e} для клиента {client}")
        clients1.disconnect(client)
    except ConnectionError:
        print('Ошибка подключения. Повторное подключение...')
        await asyncio.sleep(15)  # Ждем 5 секунд перед повторной попыткой
    except KeyboardInterrupt:
        pass
    except Exception as e:
        # Обработка других исключений
        print(f"Ошибка при отправке сообщения для клиента {client}: {e}")

@client0.on(events.NewMessage(pattern='m.off'))
async def stop_sending_messages(event):
    global stop_sending1
    stop_sending1 = True
    await event.message.edit('❌Отправка сообщений выключена')
    await asyncio.sleep(5);
    await event.message.delete();

@client0.on(events.NewMessage(pattern='m.on'))
async def start_sending_messages(event):
    global stop_sending1
    stop_sending1 = False
    await event.message.edit('✅Отправка сообщений включена')
    await asyncio.sleep(6);
    await event.message.delete();

@client0.on(events.NewMessage(pattern='m.send'))
async def send_multiple_messages1(event):
    global count1
    global cycles1
    global clients2  # Declare clients1 as a global variable
    await event.message.edit('Пробуем копать...')
    chat_id = mine_evo
    if stop_sending1:
        await asyncio.sleep(2) 
        await event.message.edit('☠️Невозможно начать копать\nОтправка сообщений выключена')
        await asyncio.sleep(3);
        await event.message.delete();
    else:
        await asyncio.sleep(2)
        await event.message.edit('💢Начинаем копать')
        await asyncio.sleep(3);
        await event.message.delete();
    while not stop_sending1:
        coroutines = []
        for client in clients2:
            coroutines.append(send_message(client, chat_id, '👨‍💻 Майнинг'))
        await asyncio.gather(*coroutines)
        await asyncio.sleep(6);
        clients2 = [client for client in clients2 if client.is_connected()]

        if not clients1:
            print("Все клиенты потеряли соединение.")
            break

for client in clients2:
    try:
        client.run_until_disconnected()
    except KeyboardInterrupt:
        client.disconnect()
    finally:
        client.disconnect()
