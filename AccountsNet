# coded by DEM
# good luck =]

from telethon import TelegramClient, sync
from telethon import events
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
from telethon.errors import FloodWaitError
import requests
import time
import random
import tracemalloc
import asyncio
import concurrent.futures

# –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
api_id1 = '12588062'
api_hash1 = 'd0f061c565991d6ed274285c0d032f7a'
phone1 = '+79816661471'

api_id2 = '13123883'
api_hash2 = 'f1fab12098570c2bf8848ad6ea23c62f'
phone2 = '+79676939873'

api_id3 = '19334807'
api_hash3 = '4b4edde7a9d46172399f0ac4cb98ae63'
phone3 = '+79842549006'

api_id4 = '16839412'
api_hash4 = 'aaa86871e0831e2ef1c9df22b921c9d4'
phone4 = '+79386950114'

api_id5 = '19179697'
api_hash5 = 'dd96018b9f53d55342f0c2c754c4fb29'
phone5 = '+79697678142'

api_id6 = '10904880'
api_hash6 = '0bce5ceebd00a5fe38dff632595b0bad'
phone6 = '+79587314180'

api_id7 = '29202662'
api_hash7 = 'e093efde1201cc926ad478cc129a4ff5'
phone7 = '+213774991926'

api_id8 = '23683219'
api_hash8 = '3712b06daec849ace954b67a522acb63'
phone8 = '+996999899010'


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ 
client1 = TelegramClient('session1', api_id1, api_hash1)
client2 = TelegramClient('session2', api_id2, api_hash2)
client3 = TelegramClient('session3', api_id3, api_hash3)
client4 = TelegramClient('session4', api_id4, api_hash4)
client5 = TelegramClient('session5', api_id5, api_hash5)
client6 = TelegramClient('session6', api_id6, api_hash6)
client7 = TelegramClient('session7', api_id7, api_hash7)
client8 = TelegramClient('session8', api_id8, api_hash8)


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
client1.connect()
if not client1.is_user_authorized():
    client1.send_code_request(phone1)
    client1.sign_in(phone1, input('Session-1 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client2.connect()
if not client2.is_user_authorized():
    client2.send_code_request(phone2)
    client2.sign_in(phone2, input('Session-2 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client3.connect()
if not client3.is_user_authorized():
    client3.send_code_request(phone3)
    client3.sign_in(phone3, input('Session-3 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client4.connect()
if not client4.is_user_authorized():
    client4.send_code_request(phone4)
    client4.sign_in(phone4, input('Session-4 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client5.connect()
if not client5.is_user_authorized():
    client5.send_code_request(phone5)
    client5.sign_in(phone5, input('Session-5 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client6.connect()
if not client6.is_user_authorized():
    client6.send_code_request(phone6)
    client6.sign_in(phone6, input('Session-6 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client7.connect()
if not client7.is_user_authorized():
    client7.send_code_request(phone7)
    client7.sign_in(phone7, input('Session-7 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client8.connect()
if not client8.is_user_authorized():
    client8.send_code_request(phone8)
    client8.sign_in(phone8, input('Session-8 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))


# –ê–¥—Ä–µ—Å—ã
mineEvo_channel = '@mine_evo_news'
my_channel = '@Demo_minePromo'
mine_evo = '@mine_evo_bot'
twins_group = '@twinsFarm_byDem'

count = 0
cycles = 0

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
async def send_message(client, chat_id, message):
    global count
    global cycles
    await client(SendMessageRequest(chat_id, message))


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π(1-9)
@client1.on(events.NewMessage(pattern='/send_multiple'))
async def send_multiple_messages(event):
    global count
    global cycles
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = event.chat_id
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 
    message_text = event.raw_text.encode('utf-8').decode('utf-8')
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    messages = event.raw_text.split(' ')[1:]
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    while True:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        coroutines = []
        for message in messages:
            coroutines.append(send_message(client1, chat_id, message))
            coroutines.append(send_message(client2, chat_id, message))
            coroutines.append(send_message(client3, chat_id, message))
            coroutines.append(send_message(client4, chat_id, message))
            coroutines.append(send_message(client5, chat_id, message))
            coroutines.append(send_message(client6, chat_id, message))
            coroutines.append(send_message(client7, chat_id, message))
            coroutines.append(send_message(client8, chat_id, message))
        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—Ä—É—Ç–∏–Ω
        results = await asyncio.gather(*coroutines, return_exceptions=True)

        for i, result in enumerate(results):
            if isinstance(result, FloodWaitError):
                # –û—à–∏–±–∫–∞ FloodWaitError –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ i –≤ —Å–ø–∏—Å–∫–µ coroutines
                client_index = i % 8  # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–∞
                print(f"–û—à–∏–±–∫–∞ FloodWaitError –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_index + 1}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(2)
        count += len(messages) * 8
        cycles += 1

clients = [client1, client2, client3, client4, client5, client6, client7, client8]


# –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ–π—Å–æ–≤
@client1.on(events.NewMessage(pattern='/cases'))
async def cases_info(event):
    # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 
    message = '–∫–µ–π—Å—ã'
    for client in clients:
        await client(SendMessageRequest(mine_evo, message))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–µ–π—Å–æ–≤

# –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤
cases_list = {
    "‚úâ": "–∫—Ç",
    "üßß": "—Ä–∫—Ç",
    "üì¶": "–∫",
    "üó≥": "—Ä–∫",
    "üïã": "–º–∏—Ñ",
    "üíé": "–∫—Ä",
    "üåå": "–∑–≤"
}

async def send_transfer_message(client, chat_id, case_name, quantity):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–µ–π—Å–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    case_alias = cases_list.get(case_name, "")
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ
    transfer_message = f"–ü–µ—Ä–µ–¥–∞—Ç—å godMODE_ZEPHYR {case_alias} {quantity}"
    await client.send_message(chat_id, transfer_message)
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 
    await asyncio.sleep(3)
async def send_transfer_messages(client, event):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = '@mine_evo_bot'
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è 
    message = event.raw_text
    lines = message.split("\n")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    for line in lines:
        for case in cases_list:
            if case in line:
                item = line.split("—à—Ç.")
                if len(item) >= 2:
                    item = item[0].split(":")
                    if len(item) >= 2:
                        item = item[1].strip()
                        await send_transfer_message(client, chat_id, case, item)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
player_names = ['gGnom1', 'Gnom2', 'Gnom3', 'Gnom4', 'Gnom5', 'Gnom6', 'Gnom7', 'Gnom8']
for i, client in enumerate(clients):
    @client.on(events.NewMessage)
    async def handle_incoming_message(event, client=client):
        for player_name in player_names:
            if f"üì¶ –ö–µ–π—Å—ã –∏–≥—Ä–æ–∫–∞\n{player_name}" in event.raw_text:
                await send_transfer_messages(client, event)

@client1.on(events.NewMessage(pattern='/msg_info'))
async def get_info(event):
    global count
    global cycles
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = event.chat_id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await send_message(client1, chat_id, f'üßë‚Äçüíª ScriptInfo\n\nüë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚àû\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}\nüåÄ –ü—Ä–æ–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycles}')

# –ü—Ä–æ–º–æ-–ö–æ–¥—ã
@client1.on(events.NewMessage(chats=[mineEvo_channel, my_channel]))  
async def process_new_message(event):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è 
    message = event.message
    if '–ü—Ä–æ–º–æ' in message.message:
        promo_code = message.message.split('–ü—Ä–æ–º–æ ')[1].split()[0]
        for client in clients:
            await client(SendMessageRequest(mine_evo, f'–ø—Ä–æ–º–æ {promo_code}'))

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
tracemalloc.start()
client1.start()
client2.start()
client3.start()
client4.start()
client5.start()
client6.start()
client7.start()
client8.start()

try:
    client1.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client1.disconnect()
try:
    client2.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client2.disconnect()
try:
    client3.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client3.disconnect()
try:
    client4.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client4.disconnect()
try:
    client5.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client5.disconnect()
try:
    client6.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client6.disconnect()
try:
    client7.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client7.disconnect()
try:
    client8.run_until_disconnected()
except KeyboardInterrupt:
    pass
finally:
    client8.disconnect()

