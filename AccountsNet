# coded by DEM
# good luck =]

from telethon import TelegramClient, sync
from telethon import events, utils
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.types import InputPeerEmpty, PeerUser, PeerChat, PeerChannel
from telethon.errors import FloodWaitError
from telethon.errors import SessionPasswordNeededError
import requests
import time
import random
import tracemalloc
import asyncio
import concurrent.futures
import json

# –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
api_id001 = '12588062'
api_hash001 = 'd0f061c565991d6ed274285c0d032f7a'
phone001 = '+79816661471'

api_id002 = '13123883'
api_hash002 = 'f1fab12098570c2bf8848ad6ea23c62f'
phone002 = '+79676939873'

api_id003 = '19334807'
api_hash003 = '4b4edde7a9d46172399f0ac4cb98ae63'
phone003 = '+79842549006'

api_id004 = '16839412'
api_hash004 = 'aaa86871e0831e2ef1c9df22b921c9d4'
phone004 = '+79386950114'

api_id005 = '19179697'
api_hash005 = 'dd96018b9f53d55342f0c2c754c4fb29'
phone005 = '+79697678142'

api_id007 = '29202662'
api_hash007 = 'e093efde1201cc926ad478cc129a4ff5'
phone007 = '+213774991926'

api_id008 = '23683219'
api_hash008 = '3712b06daec849ace954b67a522acb63'
phone008 = '+996999899010'

api_id009 = '26344028'
api_hash009 = 'aa920e0ab554994282bddfae8e9743e1'
phone009 = '+66644508357'

api_id010 = '24391372'
api_hash010 = 'f91208774fb18619d661aa988357327d'
phone010 = '+8801929321074'

api_id011 = '27999436'
api_hash011 = 'a762c27366b49c72c58cf0f265df61bc'
phone011 = '+996504072710'

api_id012 = '22136069'
api_hash012 = 'b8e5b6ef920de3a548f53e233ab9c5c0'
phone012 = '+447424459503'

api_id013 = '28054215'
api_hash013 = 'dca1c54af532f7dc0df4509bb5cd06fc'
phone013 = '+79016810191'

api_id014 = '20880148'
api_hash014 = '4cefa3607decdacf8995fa4faac6d9c0'
phone014 = '+79199250579'

api_id015 = '20074210'
api_hash015 = '40bf0e5e8441de28f0e30ef64190725b'
phone015 = '+79507244663'

api_id016 = '21931735'
api_hash016 = '9b2e64e80a51e048e4f5062772b5ab7f'
phone016 = '+380933888084'

api_id017 = '23037561'
api_hash017 = '9e11fc4b8528a8f605fc157c2fdf71e7'
phone017 = '+79961630209'

api_id018 = '29141499'
api_hash018 = '77b4d4c1b20f95d8a09b05a1c5f67578'
phone018 = '+79159670843'

api_id019 = '20205793'
api_hash019 = '537c5d400f59a6629e4fa788fc135394'
phone019 = '+79494496325'

api_id020 = '27464817'
api_hash020 = '6c1ca996231bf26a05663aa787a0d1cc'
phone020 = '+79781469611'

api_id021 = '29104274'
api_hash021 = '0b807245f3347d2d9c0b7704e29321b5'
phone021 = '+380933908995'

api_id022 = '20242585'
api_hash022 = '77312de9aab579af857c5d2fdb4e1d64'
phone022 = '+27608684454

api_id01 = '29017932'
api_hash01 = '24ed16f256156d9c2562103ff8b9ca13'
phone01 = '+79783210112'

api_id02 = '28598285'
api_hash02 = '01cb9ab33587a314e3b6bfeab6d91e6e'
phone02 = '+79787917812'

cloud_password1 = '2303'

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ 
client001 = TelegramClient('session001', api_id001, api_hash001)
client002 = TelegramClient('session002', api_id002, api_hash002)
client003 = TelegramClient('session003', api_id003, api_hash003)
client004 = TelegramClient('session004', api_id004, api_hash004)
client005 = TelegramClient('session005', api_id005, api_hash005)
client007 = TelegramClient('session007', api_id007, api_hash007)
client008 = TelegramClient('session008', api_id008, api_hash008)
client009 = TelegramClient('session009', api_id009, api_hash009)
client010 = TelegramClient('session010', api_id010, api_hash010)
client011 = TelegramClient('session011', api_id011, api_hash011)
client012 = TelegramClient('session012', api_id012, api_hash012)
client013 = TelegramClient('session013', api_id013, api_hash013)
client014 = TelegramClient('session014', api_id014, api_hash014)
client015 = TelegramClient('session015', api_id015, api_hash015)
client016 = TelegramClient('session016', api_id016, api_hash016)
client017 = TelegramClient('session017', api_id017, api_hash017)
client018 = TelegramClient('session018', api_id018, api_hash018)
client019 = TelegramClient('session019', api_id019, api_hash019)
client020 = TelegramClient('session020', api_id020, api_hash020)
client021 = TelegramClient('session021', api_id021, api_hash021)
client022 = TelegramClient('session022', api_id022, api_hash022)
client01 = TelegramClient('session01', api_id01, api_hash01)
client02 = TelegramClient('session02', api_id02, api_hash02)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
clients1 = [client001, client002, client003, client004, client005, client007, client008, client009, client010, client011, client012, client013, client014, client015, client016, client017, client018, client019, client020, client021, client022]
clients2 = [client01, client02]
for client in clients1:
    client.connect()
    if not client.is_user_authorized():
        client.send_code_request(client.phone)
        try:
            client.sign_in(client.phone, input(f'Session {client.session_file} –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
        except SessionPasswordNeededError:
            client.sign_in(password=cloud_password1)

client01.connect()
if not client01.is_user_authorized():
    client01.send_code_request(phone01)
    client01.sign_in(phone01, input('Session-01 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))
client02.connect()
if not client02.is_user_authorized():
    client02.send_code_request(phone02)
    client02.sign_in(phone02, input('Session-02 –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '))

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
client1.start()
client2.start()
client3.start()
client4.start()
client5.start()
client7.start()
client8.start()
client9.start()
client10.start()
client11.start()
client12.start()
client13.start()
client14.start()
client15.start()
client16.start()
client17.start()
client18.start()
client19.start()
client20.start()
client21.start()
client22.start()
client01.start()
client02.start()

# –ê–¥—Ä–µ—Å—ã
mineEvo_channel = '@mine_evo_news'
my_channel = '@Demo_minePromo'
mine_evo = '@mine_evo_bot'
twins_group = '@twinsFarm_byDem'

count1 = 0
cycles1 = 0
count2 = 0
cycles2 = 0
stop_sending1 = True
stop_sending2 = True
stop_sending3 = False
stop_sending4 = False
clients1 = [client1, client2, client3, client4, client5, client7, client8, client9, client10, client11, client12, client13, client14, client15, client16, client17, client18, client19, client20, client21, client22]
clients2 = [client01, client02]
clients3 = [client1, client2, client3, client4, client5, client7, client8, client9, client10, client11, client12, client13, client14, client15, client16, client17, client18, client19, client20, client21, client22, client01, client02]
player_names1 = ['Gnom1', 'Gnom2', 'Gnom3', 'Gnom4', 'Gnom5', 'Gnom6', 'Gnom7', 'Gnom8', 'Gnom13', 'Gnom14', 'Gnom15', 'Gnom16', 'Gnom17', 'Gnom18', 'Gnom19', 'Gnom20', 'Gnom21', 'Gnom22', 'Gnom23', 'Gnom24', 'Gnom25', 'Gnom26', 'Gnom27', 'Gnom28']
player_names2 = ['–¢–æ—É–∫–∞','Bisbaka']

async def send_message(client, mine_evo, message):
    while True:
        try:
            await asyncio.sleep(2)           
            await client.send_message(mine_evo, message)
        except FloodWaitError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ FloodWaitError
            print(f"–û—à–∏–±–∫–∞ FloodWaitError –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client}: {e}")
            clients1.disconnect(client)
        except ValueError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É
            print(f"–û—à–∏–±–∫–∞: {e} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client}")
            clients1.disconnect(client)
        except ConnectionError:
            print('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
            await asyncio.sleep(15)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            continue
        except KeyboardInterrupt:
            break
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client}: {e}")
            return

@client1.on(events.NewMessage(pattern='m.off'))
async def stop_sending_messages(event):
    global stop_sending1
    stop_sending1 = True
    await event.message.edit('‚ùå–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')

@client1.on(events.NewMessage(pattern='m.on'))
async def start_sending_messages(event):
    global stop_sending1
    stop_sending1 = False
    await event.message.edit('‚úÖ–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞')

@client01.on(events.NewMessage(pattern='m.off'))
async def stop_sending_messages(event):
    global stop_sending2
    stop_sending2 = True
    await event.message.edit('‚ùå–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')

@client01.on(events.NewMessage(pattern='m.on'))
async def start_sending_messages(event):
    global stop_sending2
    stop_sending2 = False
    await event.message.edit('‚úÖ–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞')

@client1.on(events.NewMessage(pattern='m.send'))
async def send_multiple_messages1(event):
    global count1
    global cycles1
    global clients1  # Declare clients1 as a global variable
    await event.message.edit('–ü—Ä–æ–±—É–µ–º –∫–æ–ø–∞—Ç—å...')
    chat_id = mine_evo
    if stop_sending1:
        await asyncio.sleep(2) 
        await event.message.edit('‚ò†Ô∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')
    else:
        await asyncio.sleep(2)
        await event.message.edit('üí¢–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∞—Ç—å')
    while not stop_sending1:
        coroutines = []
        for client in clients1:
            coroutines.append(send_message(client, chat_id, '–∫–æ–ø'))
        await asyncio.gather(*coroutines)
        await asyncio.sleep(2)
        count1 += 22
        cycles1 += 1
        clients1 = [client for client in clients1 if client.is_connected()]

        if not clients1:
            print("–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            break

@client01.on(events.NewMessage(pattern='m.send'))
async def send_multiple_messages2(event):
    global count2
    global cycles2
    await event.message.edit('–ü—Ä–æ–±—É–µ–º –∫–æ–ø–∞—Ç—å...')
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = mine_evo
    if stop_sending2:
        await asyncio.sleep(2)
        await event.message.edit('‚ò†Ô∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')
    else:
        await asyncio.sleep(2)
        await event.message.edit('üí¢–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∞—Ç—å')
    while not stop_sending2:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π —Ü–∏–∫–ª–∞
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        coroutines = []
        for client in clients2:
            coroutines.append(send_message(client, chat_id, '–∫–æ–ø'))
        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—Ä—É—Ç–∏–Ω
        await asyncio.gather(*coroutines)
        # –ó–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(2)
        count2 += 2
        cycles2 += 1

@client1.on(events.NewMessage(pattern='gl.send'))
async def send_multiple_messages3(event):
    global count2
    global cycles2
    await event.message.edit('–ü—Ä–æ–±—É–µ–º –∫–æ–ø–∞—Ç—å...')
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = mine_evo
    if stop_sending3:
        await asyncio.sleep(2)
        await event.message.edit('‚ò†Ô∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')
    else:
        await asyncio.sleep(2)
        await event.message.edit('üí¢–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∞—Ç—å')
    while not stop_sending3:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π —Ü–∏–∫–ª–∞
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        coroutines = []
        for client in clients2:
            coroutines.append(send_message(client, chat_id, '–∫–æ–ø'))
        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—Ä—É—Ç–∏–Ω
        await asyncio.gather(*coroutines)
        # –ó–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(2)
        count1 += 2
        cycles1 += 1

@client01.on(events.NewMessage(pattern='gl.send'))
async def send_multiple_messages4(event):
    global count1
    global cycles1
    await event.message.edit('–ü—Ä–æ–±—É–µ–º –∫–æ–ø–∞—Ç—å...')
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = mine_evo
    if stop_sending3:
        await asyncio.sleep(2)
        await event.message.edit('‚ò†Ô∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞')
    else:
        await asyncio.sleep(2)
        await event.message.edit('üí¢–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∞—Ç—å')
    while not stop_sending3:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π —Ü–∏–∫–ª–∞
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        coroutines = []
        for client in clients1:
            coroutines.append(send_message(client, chat_id, '–∫–æ–ø'))
        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—Ä—É—Ç–∏–Ω
        await asyncio.gather(*coroutines)
        # –ó–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(2)
        count1 += 22
        cycles1 += 1


# –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ–π—Å–æ–≤
@client1.on(events.NewMessage(pattern='m.cases'))
async def cases_info1(event):
    # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 
    message = '–∫–µ–π—Å—ã'
    for client in clients1:
        await asyncio.sleep(2)
        await client(SendMessageRequest(mine_evo, message))

# –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ–π—Å–æ–≤
@client01.on(events.NewMessage(pattern='m.cases'))
async def cases_info2(event):
    # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 
    message = '–∫–µ–π—Å—ã'
    for client in clients2:
        await asyncio.sleep(2)
        await client(SendMessageRequest(mine_evo, message))


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–µ–π—Å–æ–≤

# –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤
cases_list = {
    "‚úâ": "–∫—Ç",
    "üßß": "—Ä–∫—Ç",
    "üì¶": "–∫",
    "üó≥": "—Ä–∫",
    "üïã": "–º–∏—Ñ",
    "üíé": "–∫—Ä",
    "üåå": "–∑–≤"
}

async def send_transfer_message1(client, chat_id, case_name, quantity):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–µ–π—Å–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    case_alias = cases_list.get(case_name, "")
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ
    transfer_message1 = f"–ü–µ—Ä–µ–¥–∞—Ç—å godMODE_ZEPHYR {case_alias} {quantity}"
    await client.send_message(chat_id, transfer_message1)
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 
    await asyncio.sleep(3)
async def send_transfer_messages1(client, event):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = '@mine_evo_bot'
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è 
    message = event.raw_text
    lines = message.split("\n")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    for line in lines:
        for case in cases_list:
            if case in line:
                item = line.split("—à—Ç.")
                if len(item) >= 2:
                    item = item[0].split(":")
                    if len(item) >= 2:
                        item = item[1].strip()
                        await send_transfer_message1(client, chat_id, case, item)

async def send_transfer_message2(client, chat_id, case_name, quantity):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–µ–π—Å–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    case_alias = cases_list.get(case_name, "")
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ
    transfer_message2 = f"–ü–µ—Ä–µ–¥–∞—Ç—å Reinu {case_alias} {quantity}"
    await client.send_message(chat_id, transfer_message2)
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 
    await asyncio.sleep(3)
async def send_transfer_messages2(client, event):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = '@mine_evo_bot'
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è 
    message = event.raw_text
    lines = message.split("\n")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    for line in lines:
        for case in cases_list:
            if case in line:
                item = line.split("—à—Ç.")
                if len(item) >= 2:
                    item = item[0].split(":")
                    if len(item) >= 2:
                        item = item[1].strip()
                        await send_transfer_message2(client, chat_id, case, item)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π1
for i, client in enumerate(clients1):
    @client.on(events.NewMessage)
    async def handle_incoming_message(event, client=client):
        for player_name in player_names1:
            if f"üì¶ –ö–µ–π—Å—ã –∏–≥—Ä–æ–∫–∞\n{player_name}" in event.raw_text:
                await asyncio.sleep(2)
                await send_transfer_messages1(client, event)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π2
for i, client in enumerate(clients2):
    @client.on(events.NewMessage)
    async def handle_incoming_message(event, client=client):
        for player_name in player_names2:
            if f"üì¶ –ö–µ–π—Å—ã –∏–≥—Ä–æ–∫–∞\n{player_name}" in event.raw_text:
                await asyncio.sleep(2)
                await send_transfer_messages2(client, event)



@client1.on(events.NewMessage(pattern='m.info'))
async def get_info1(event):
    global count1
    global cycles1
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = event.chat_id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await send_message(client1, chat_id, f'üßë‚Äçüíª ScriptInfo\n\nüë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚àû\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count1}\nüåÄ –ü—Ä–æ–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycles1}')

@client01.on(events.NewMessage(pattern='m.info'))
async def get_info1(event):
    global count2
    global cycles2
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id —á–∞—Ç–∞
    chat_id = event.chat_id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await send_message(client01, chat_id, f'üßë‚Äçüíª ScriptInfo\n\nüë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚àû\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count2}\nüåÄ –ü—Ä–æ–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycles2}')

# –ü—Ä–æ–º–æ-–ö–æ–¥—ã
@client1.on(events.NewMessage(chats=[mineEvo_channel, my_channel]))  
async def process_new_message(event):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è 
    message = event.message
    if '–ü—Ä–æ–º–æ' in message.message:
        promo_code = message.message.split('–ü—Ä–æ–º–æ ')[1].split()[0]
        for client in clients3:
            await client(SendMessageRequest(mine_evo, f'–ø—Ä–æ–º–æ {promo_code}'))

for client in clients3:
    try:
        client.run_until_disconnected()
    except KeyboardInterrupt:
        pass
    finally:
        client.disconnect()

