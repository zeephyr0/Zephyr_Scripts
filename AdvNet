#boo


import random
import time 
from telethon.sync import TelegramClient, events
from telethon.tl.functions.channels import JoinChannelRequest
chat_usernames = ['@vzaimnaya_podpiskac', '@vzaimnopodpiskaru', '@kolomio', '@PIAR_VILON', '@vzsubs1']  # Список юзернеймов чатов
messages = ['лучший чат для взаимных сообщений: @Dem1_PiarChat', 'взаимный пиар чат и ролок @Dem1_PiarChat']  # Список сообщений для отправки
count = 0  # Переменная для отслеживания количества отправленных сообщений
# Функция для проверки наличия вашего имени в тегах сообщения и призыва к подписке
def has_my_username_and_subscription_request(message, my_username):
    return '@' + my_username.lower() in message.raw_text.lower() and ('подпишитесь на канал' in message.text.lower() or 'подписаться на' in message.text.lower())
# Функция для отправки сообщений
async def send_multiple_messages(client, my_username):
    global count  # Объявляем переменную глобальной для отслеживания значения через вызовы функций
    
    # Подписываемся на каналы или группы из списка
    for chat_username in chat_usernames:
        try:
            chat = await client.get_entity(chat_username)
            if chat.megagroup:
                if not chat.username:
                    continue
                if not await client.is_chat_subscribed(chat.username):
                    await client(JoinChannelRequest(chat.username))
        except ValueError:
            continue
        except Exception as e:
            continue
    
    # Бесконечный цикл отправки сообщений
    while True:
        # Выбираем случайный чат и сообщение из списков
        chat_username = random.choice(chat_usernames)
        message = random.choice(messages)
        
        try:
            # Отправка сообщений
            await client.send_message(chat_username, message)
            count += 1  # Увеличиваем счетчик сообщений
            time.sleep(77);
        except:
            pass

# Инициализация клиентов
api_id10 = '26056020'
api_hash10 = 'b285005edea91f8c55172d66d0c163a2'

api_id11 = '27250768'
api_hash11 = '88fa6db6643659749f0e107130dedc70'

api_id12 = '26637536'
api_hash12 = '95dacc89867e3089d9722be702afd959'

api_id13 = '20244628'
api_hash13 = '31f1eac97bf8851425d620b69cc87d75'

api_id14 = '28781052'
api_hash14 = 'da8a73f5fb61c1cf67a871a2a5afef9a'

api_id15 = '22823126'
api_hash15 = '07b238927248c53498fa9f013cc75809'

api_id16 = '28506932'
api_hash16 = '0612b354524635bbfbd4e440299b4e65'

api_id17 = '29202662'
api_hash17 = 'e093efde1201cc926ad478cc129a4ff5'

client10 = TelegramClient('session10', 'api_id_10', 'api_hash_10')
client11 = TelegramClient('session11', 'api_id_11', 'api_hash_11')
client12 = TelegramClient('session12', 'api_id_12', 'api_hash_12')
client13 = TelegramClient('session13', 'api_id_13', 'api_hash_13')
client14 = TelegramClient('session14', 'api_id_14', 'api_hash_14')
client15 = TelegramClient('session15', 'api_id_15', 'api_hash_15')
client16 = TelegramClient('session16', 'api_id_16', 'api_hash_16')
client17 = TelegramClient('session17', 'api_id_17', 'api_hash_17')

# Объявление функций обработчиков событий для каждого клиента
@events.register(events.NewMessage(pattern='/send_adv'))
async def send_multiple_messages_handler(event):
    await send_multiple_messages(event.client, event.client.get_me().username)
@events.register(events.NewMessage(incoming=True))
async def handle_incoming_message_handler(event):
    if has_my_username_and_subscription_request(event.message, event.client.get_me().username):
        # Вытаскиваем имя канала из сообщения и подписываемся на него
        channel_username = event.message.text.split(' ')[-1]
        try:
            channel = await event.client.get_entity(channel_username)
            if not await event.client.is_chat_subscribed(channel.username):
                await event.client(JoinChannelRequest(channel.username))
        except:
            pass
# Запуск клиентов
with client10, client11, client12, client13, client14, client15, client16, client17, client19:
    client10.add_event_handler(send_multiple_messages_handler)
    client10.add_event_handler(handle_incoming_message_handler)
    client11.add_event_handler(send_multiple_messages_handler)
    client11.add_event_handler(handle_incoming_message_handler)
    client12.add_event_handler(send_multiple_messages_handler)
    client12.add_event_handler(handle_incoming_message_handler)
    client13.add_event_handler(send_multiple_messages_handler)
    client13.add_event_handler(handle_incoming_message_handler)
    client14.add_event_handler(send_multiple_messages_handler)
    client14.add_event_handler(handle_incoming_message_handler)
    client15.add_event_handler(send_multiple_messages_handler)
    client15.add_event_handler(handle_incoming_message_handler)
    client16.add_event_handler(send_multiple_messages_handler)
    client16.add_event_handler(handle_incoming_message_handler)
    client17.add_event_handler(send_multiple_messages_handler)
    client17.add_event_handler(handle_incoming_message_handler)
    
    client10.run_until_disconnected()
    client11.run_until_disconnected()
    client12.run_until_disconnected()
    client13.run_until_disconnected()
    client14.run_until_disconnected()
    client15.run_until_disconnected()
    client16.run_until_disconnected()
    client17.run_until_disconnected()
