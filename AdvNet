import random
import time
from telethon.sync import TelegramClient
from telethon.errors import UserAlreadyParticipantError

# Задай список чатов и сообщений
chat_ids = ["-1001870697043"]  # Замени на реальные chat_id
messages = ["Сообщение 1", "Сообщение 2", "Сообщение 3"]  # Замени на реальные сообщения

# Задай задержку между отправкой сообщений (в секундах)
delay = 5

# Задай никнейм пользователя
username = "@ehhehejdjx"  # Замени на свой никнейм

# Задай значения для API ID и хэша клиента
api_id = '12588062'  # Замени на свой API ID
api_hash = 'd0f061c565991d6ed274285c0d032f7a'  # Замени на свой API хэш

# Создай экземпляр TelegramClient
client = TelegramClient('session_name', api_id, api_hash)

async def check_subscription(message):
    # Проверка сообщений на наличие требования подписки
    return ("подписаться" in message.message.lower() or
            "прошу подпишитесь" in message.message.lower())

async def subscribe_to_channels(chat_id):
    # Подписка на каналы
    try:
        await client(JoinChannelRequest(channel=chat_id))
        await client.send_message(chat_id, 'Подписываюсь на каналы...')
    except UserAlreadyParticipantError:
        pass

with client:
    for _ in range(10):  # Задай количество отправляемых сообщений
        chat_id = random.choice(chat_ids)
        message = random.choice(messages)

        # Отправка сообщения
        client.send_message(chat_id, message)

        # Проверка наличия требования подписки
        time.sleep(delay)  # Задержка перед отправкой следующего сообщения
        updates = await client.get_messages(chat_id, limit=10)
        for update in updates:
            if update.chat_id == chat_id and await check_subscription(update):
                if username in update.message:
                    await subscribe_to_channels(chat_id)
                    break
